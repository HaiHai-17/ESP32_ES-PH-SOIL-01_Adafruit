#include <WiFi.h>
#include "AdafruitIO_WiFi.h"
#include <ModbusMaster.h>

// ======= C·∫§U H√åNH C·∫¢M BI·∫æN PH =======
ModbusMaster node;
#define RXD2 16
#define TXD2 17
float phValue;

// ======= C·∫§U H√åNH WIFI & ADAFRUIT IO =======
#define WIFI_SSID       "ssid"
#define WIFI_PASS       "password"

#define AIO_USERNAME    "username"
#define AIO_KEY         "user api"

AdafruitIO_WiFi io(AIO_USERNAME, AIO_KEY, WIFI_SSID, WIFI_PASS);

// ======= KHAI B√ÅO FEED =======
AdafruitIO_Feed *doAmDat     = io.feed("do-am-dat");
AdafruitIO_Feed *doPhDat     = io.feed("do-ph-dat");
AdafruitIO_Feed *relayFeed   = io.feed("relay");
AdafruitIO_Feed *autoFeed    = io.feed("auto");
AdafruitIO_Feed *autoStatus  = io.feed("auto-status");

// ======= KHAI B√ÅO RELAY & C·∫¢M BI·∫æN ƒê·ªò ·∫®M =======
#define RELAY_PIN 27
#define SENSOR 35

// ======= BI·∫æN TH·ªúI GIAN & TR·∫†NG TH√ÅI =======
unsigned long thoiGianTruoc = 0;
const unsigned long chuKyGui = 30000; // 30 gi√¢y
bool cheDoAuto = true;
bool relayDangBat = false;

void setup() {
  Serial.begin(115200);
  Serial2.begin(4800, SERIAL_8N1, RXD2, TXD2); // UART2 giao ti·∫øp v·ªõi Sensor pH
  node.begin(1, Serial2); // ƒê·ªãa ch·ªâ Modbus = 1

  // ======= K·∫æT N·ªêI WIFI =======
  Serial.println("ƒêang k·∫øt n·ªëi WiFi...");
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  int dem = 0;
  while (WiFi.status() != WL_CONNECTED && dem++ < 20) {
    delay(500);
    Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi!");
  } else {
    Serial.println("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi!");
    while (true);
  }

  // ======= K·∫æT N·ªêI ADAFRUIT IO =======
  Serial.println("ƒêang k·∫øt n·ªëi Adafruit IO...");
  io.connect();
  dem = 0;
  while (io.status() < AIO_CONNECTED && dem++ < 20) {
    delay(500);
    Serial.print(".");
  }
  if (io.status() == AIO_CONNECTED) {
    Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi Adafruit IO!");
  } else {
    Serial.println("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Adafruit IO!");
    while (true);
  }
  Serial.println("ƒêang ƒë·ªçc gi√° tr·ªã pH...");

  // ======= C·∫§U H√åNH RELAY =======
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  relayDangBat = false;

  // ======= ƒêƒÇNG K√ù H√ÄM X·ª¨ L√ù T·ª™ SERVER =======
  autoFeed->onMessage(handleAutoMessage);
  relayFeed->onMessage(handleRelayMessage);
  doAmDat->onMessage(handleMessage);
  doPhDat->onMessage(handleMessage);
}

  // ======= NH·∫¨N D·ªÆ LI·ªÜU T·ª™ SERVER =======
void handleMessage(AdafruitIO_Data *data) {
  Serial.print("Nh·∫≠n d·ªØ li·ªáu: ");
  Serial.println(data->value());
}

// ======= X·ª¨ L√ù NH·∫§N BUTTON AUTO (d·∫°ng toggle ng∆∞·ª£c tr·∫°ng th√°i) =======
void handleAutoMessage(AdafruitIO_Data *data) {
  cheDoAuto = !cheDoAuto;
  Serial.print("‚úÖ Chuy·ªÉn ch·∫ø ƒë·ªô: ");
  Serial.println(cheDoAuto ? "T·ª∞ ƒê·ªòNG" : "TH·ª¶ C√îNG");
  autoStatus->save(cheDoAuto ? "AUTO" : "MANUAL");
}

// ======= X·ª¨ L√ù ƒêI·ªÄU KHI·ªÇN RELAY KHI TH·ª¶ C√îNG =======
void handleRelayMessage(AdafruitIO_Data *data) {
  if (!cheDoAuto) {
    String lenh = data->value();
    if (lenh == "ON") {
      digitalWrite(RELAY_PIN, HIGH);
      relayDangBat = true;
      Serial.println("‚úÖ Relay B·∫¨T (TH·ª¶ C√îNG)");
    } else {
      digitalWrite(RELAY_PIN, LOW);
      relayDangBat = false;
      Serial.println("‚úÖ Relay T·∫ÆT (TH·ª¶ C√îNG)");
    }
  } else {
    Serial.println("‚ö†Ô∏è B·ªè qua l·ªánh th·ªß c√¥ng v√¨ ƒëang ·ªü ch·∫ø ƒë·ªô T·ª∞ ƒê·ªòNG");
  }
}

  // ======= ƒê·ªåC THANH GHI T·ª™ C·∫¢M BI·∫æN PH =======
void readSensorpH(){
  uint8_t result = node.readHoldingRegisters(0x0000, 1); // ƒê·ªçc 1 thanh ghi t·∫°i ƒë·ªãa ch·ªâ 0x0000

  if (result == node.ku8MBSuccess) {
    phValue = node.getResponseBuffer(0) / 10.0;   // Chia cho 10 ƒë·ªÉ ra s·ªë th·∫≠p ph√¢n
    Serial.print("Gi√° tr·ªã pH: ");
    Serial.println(phValue, 2);
  } else {
    Serial.print("L·ªói ƒë·ªçc c·∫£m bi·∫øn. M√£ l·ªói: ");
    Serial.println(result, HEX);
  }
}

  // ======= ƒê·ªåC ANALOG T·ª™ C·∫¢M BI·∫æN ƒê·ªò ·∫®M =======
int readDoAmDat() {
  int doAmRaw = analogRead(SENSOR);             // ƒê·ªçc gi√° tr·ªã analog
  int doAmPercent = map(doAmRaw, 0, 4095, 0, 100);  // Chuy·ªÉn v·ªÅ % (gi√° tr·ªã t·ª´ 0 -> 4095 t∆∞∆°ng ·ª©ng 0 -> 100%)
  return doAmPercent;
}


void loop() {
  io.run();

  unsigned long thoiGianHienTai = millis();

  if (thoiGianHienTai - thoiGianTruoc >= chuKyGui) {
    thoiGianTruoc = thoiGianHienTai;

    readSensorpH();             // G·ªçi h√†m ƒë·ªçc ƒë·ªô ph

    int doAm = readDoAmDat();  // G·ªçi h√†m ƒë·ªçc ƒë·ªô ·∫©m ƒë·∫•t

    Serial.print("üå± ƒê·ªô ·∫©m: ");
    Serial.print(doAm);
    Serial.print(" | pH: ");
    Serial.println(phValue);

    // ======= ƒêI·ªÄU KHI·ªÇN RELAY T·ª∞ ƒê·ªòNG =======
    if (cheDoAuto) {
      if (doAm < 50 && !relayDangBat) {
        digitalWrite(RELAY_PIN, HIGH);
        relayDangBat = true;
        Serial.println("‚úÖ Relay B·∫¨T (AUTO: ƒë·ªô ·∫©m < 50)");
        relayFeed->save("ON");
      } else if (doAm > 70 && relayDangBat) {
        digitalWrite(RELAY_PIN, LOW);
        relayDangBat = false;
        Serial.println("‚úÖ Relay T·∫ÆT (AUTO: ƒë·ªô ·∫©m > 70)");
        relayFeed->save("OFF");
      } else {
        Serial.println("‚ÑπÔ∏è Gi·ªØ nguy√™n tr·∫°ng th√°i relay");
      }
    } else {
      Serial.println("‚öôÔ∏è Ch·∫ø ƒë·ªô TH·ª¶ C√îNG ‚ûù kh√¥ng can thi·ªáp relay t·ª± ƒë·ªông");
    }

    // ======= G·ª¨I D·ªÆ LI·ªÜU C·∫¢M BI·∫æN =======
    doAmDat->save(doAm);
    doPhDat->save(phValue);
  }
}
